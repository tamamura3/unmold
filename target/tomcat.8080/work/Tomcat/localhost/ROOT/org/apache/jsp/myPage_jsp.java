/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.13
 * Generated at: 2018-12-29 14:13:02 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import org.apache.commons.lang.StringEscapeUtils;
import net.unmold.beans.User;
import javax.servlet.http.HttpSession;
import net.unmold.beans.Achievement;
import java.util.List;
import net.unmold.dao.GetChallengeDAO;
import net.unmold.beans.Challenge;
import net.unmold.dao.GetReviewDAO;

public final class myPage_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("javax.servlet.http.HttpSession");
    _jspx_imports_classes.add("net.unmold.beans.Challenge");
    _jspx_imports_classes.add("net.unmold.beans.User");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("net.unmold.dao.GetReviewDAO");
    _jspx_imports_classes.add("net.unmold.dao.GetChallengeDAO");
    _jspx_imports_classes.add("net.unmold.beans.Achievement");
    _jspx_imports_classes.add("org.apache.commons.lang.StringEscapeUtils");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n");
      out.write("<html>\n");
      out.write("<head>\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/actionTagHead.jsp", out, false);
      out.write("\n");
      out.write("<title>Insert title here</title>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\n");
      out.write("\t");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/actionTagHeader.jsp", out, false);
      out.write("\n");
      out.write("\t\n");
      out.write("\t\n");
      out.write("\t");

		User user = (User) session.getAttribute("loggedIn");
	
      out.write("\n");
      out.write("\n");
      out.write("\t\n");
      out.write("\t\n");
      out.write("\t\n");
      out.write("\t\n");
      out.write("\t");

		List<Achievement> e = (List<Achievement>) session.getAttribute("achievementList");
	
      out.write("\n");
      out.write("\n");
      out.write("\t<div class=\"body-wrapper\">\n");
      out.write("\n");
      out.write("\t\t<div class=\"mypage-t\">MYPAGE</div>\n");
      out.write("\n");
      out.write("\t\t<div>\n");
      out.write("\t\t\tACHIEVEMENT<br> <br>\n");
      out.write("\t\t\t");
if(e.size() == 0){
			
      out.write("\n");
      out.write("\t\t\t<div class=\"no-contents\">No achievement.</div>\n");
      out.write("\t\t\t");

			}else{
				for (int i = 0; i < e.size(); i++) {
					GetChallengeDAO getChallengeDAO = new GetChallengeDAO();
					Challenge challenge = getChallengeDAO.getChallenge(e.get(i).getChallengeId());
			
      out.write("\n");
      out.write("\n");
      out.write("\t\t\t<div class=\"mypage-single-challenge-w\">\n");
      out.write("\t\t\t\t<div class=\"mypage-challenge-t\">\n");
      out.write("\t\t\t\t\t<i class=\"fas fa-trophy fa-sm\"></i>\n");
      out.write("\t\t\t\t\t");
      out.print(StringEscapeUtils.escapeHtml(challenge.getChallengeName()));
      out.write("</div>\n");
      out.write("\t\t\t\t<div class=\"mypage-challenge-nav-w\">\n");
      out.write("\t\t\t\t\t<a\n");
      out.write("\t\t\t\t\t\thref=\"SingleChallengeLogic?number=");
      out.print(challenge.getChallengeId());
      out.write("\"><div\n");
      out.write("\t\t\t\t\t\t\tclass=\"mypage-challenge-menu\">Detail</div></a>\n");
      out.write("\n");
      out.write("\t\t\t\t\t<!-- もしレビュー済みならレビューをみるボタンを追加 -->\n");
      out.write("\t\t\t\t\t\n");
      out.write("\t\t\t\t\t");

						GetReviewDAO getReviewDAO = new GetReviewDAO();
							boolean reviewed = getReviewDAO.haveReviewedBefore(user.getId(), e.get(i).getChallengeId());
					
      out.write("\n");
      out.write("\t\t\t\t\t");

						if (reviewed) {
					
      out.write("\n");
      out.write("\t\t\t\t\t<a href=\"/unmold/MyReview?number=");
      out.print(challenge.getChallengeId());
      out.write("\"><div\n");
      out.write("\t\t\t\t\t\t\tclass=\"mypage-challenge-menu\">MyReview</div></a>\n");
      out.write("\t\t\t\t\t");

						}else{
					
      out.write("\n");
      out.write("\t\t\t\t\t<a\n");
      out.write("\t\t\t\t\t\thref=\"/unmold/review-form?id=");
      out.print(challenge.getChallengeId());
      out.write("&title=");
      out.print(StringEscapeUtils.escapeHtml(challenge.getChallengeName()));
      out.write("\"><div\n");
      out.write("\t\t\t\t\t\t\tclass=\"mypage-challenge-menu\">Write review</div></a>\n");
      out.write("\t\t\t\t\t");
 } 
      out.write("\n");
      out.write("\t\t\t\t\t<a href=\"RemoveAchievement?number=");
      out.print(challenge.getChallengeId());
      out.write("\"\n");
      out.write("\t\t\t\t\t\tonclick=\"return confirmRemoveChallenge()\"><div\n");
      out.write("\t\t\t\t\t\t\tclass=\"mypage-challenge-menu\">Remove</div></a>\n");
      out.write("\t\t\t\t</div>\n");
      out.write("\t\t\t</div>\n");
      out.write("\t\t\t");

				}}
			
      out.write("\n");
      out.write("\n");
      out.write("\t\t</div>\n");
      out.write("\n");
      out.write("\t\t<!-- account menu -->\n");
      out.write("\t\t<div class=\"account-setting-w\">\n");
      out.write("\t\t\t<div class=\"mypage-accountmenu\">ACCOUNT MENU</div>\n");
      out.write("\t\t\t<a href=\"/unmold/user-info\"><div class=\"mypage-setting-menu\">EDIT\n");
      out.write("\t\t\t\t\tINFO</div></a> <a href=\"/unmold/LogoutLogic\" onclick=\"return confirmLogout()\"><div\n");
      out.write("\t\t\t\t\tclass=\"mypage-setting-menu\">LOG OUT</div> <a\n");
      out.write("\t\t\t\thref=\"/unmold/delete-account\"><div class=\"mypage-setting-menu\">DELETE\n");
      out.write("\t\t\t\t\t\tACCOUNT</div></a>\n");
      out.write("\t\t</div>\n");
      out.write("\t</div>\n");
      out.write("\n");
      out.write("\t");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/actionTagFooter.jsp", out, false);
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
